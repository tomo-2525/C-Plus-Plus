コンストラクタは、クラス名と一緒の名前にする。デストラクタは、〜クラス名になる。
たとえばクラス名がXの時は、コンストラクタがXでデストラクタが〜Xになる。
デストラクタは、引数と戻り値がなく、クラスに一つだけである。

デストラクタを定義しない場合は、コンパイラが定義する。
動的に割り当てられた変数やリソースを使用している場合は、メモリやリソースを解放するデストラクタを実装する必要がある。


・コンストラクタがオブジェクトを構築する順序
基底クラスのコンストラクタを呼ぶ
メンバコンストラクタを呼ぶ
コンストラクタの{}の部分を実行する

・デストラクタがオブジェクトを破壊する順序
デストラクタの{}の部分を実行する
メンバデストラクタを呼ぶ
基底クラスのデストラクタを呼ぶ


- クラスに対して宣言された場合、オブジェクトがスコープ外になったり削除されたりすると、暗黙のうちにデストラクタが呼び出されます。したがって、破壊を防ぐためには、デストラクタをprivateにすると他のクラスから呼ばれなくなるので暗黙的にデストラクタが呼ばれることが防げます。
- 同様の技術を使用して、オブジェクトの構築を防止することができます。
class A { 
    public:
        void destroy() { this->~A(); } // explicit 
    private:
        ~A() { // ... } // prevent implicit destruction 
};

c++11から、＝deleteが追加されたこれは、は、特殊関数の暗黙定義を明示的に禁止するための機能である。
class A { 
    public:
        A() = delete; 
};