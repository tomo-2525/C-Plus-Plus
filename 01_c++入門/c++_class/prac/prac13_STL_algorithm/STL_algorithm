for_each()
範囲の全ての要素に、指定された関数を適用する。


find()
指定された値を検索する


search()
(1) : 範囲[first1, last1)内からサブシーケンス[first2, last2)を検索する。各要素の等値比較としてoperator==を使用する
(2) : 範囲[first1, last1)内からサブシーケンス[first2, last2)を検索する。各要素の等値比較として二項述語関数オブジェクトpredを使用する
(3) : (1)の並列アルゴリズム版。第1パラメータとして実行ポリシーをとる
(4) : (2)の並列アルゴリズム版。第1パラメータとして実行ポリシーをとる
(5) : 対象となるサブシーケンスを包含するsercher関数オブジェクトを使用して、範囲[first, last)から対象のサブシーケンスを検索する。

copy()
指定された範囲の要素をコピーする。

transform()
全ての要素に関数を適用する

reverse()
要素の並びを逆にする。


remove()
指定された要素を取り除く。

remove_copy()
指定された要素を除け、その結果を出力の範囲へコピーする

unique()
重複した要素を除ける。
この関数は、隣り合った重複要素を除いた要素を、範囲の先頭に集める。この関数によってコンテナから直接要素が削除され、コンテナの要素数が減るようなことはない。コンテナから実際に要素を削除する場合は、この関数の戻り値として、先頭に集められた重複なし範囲の末尾の次を指すイテレータが返るため、そのイテレータを介してコンテナのerase()メンバ関数などを呼び出し、削除を行うこと。
この関数の戻り値として返されるイテレータ以降の値は未規定。

sort()
範囲を並べ替える

binary_search()
二分探索法による検索を行う

lower_bound()
指定された要素以上の値が現れる最初の位置のイテレータを取得する


upper_bound()
指定された要素より大きい値が現れる最初の位置のイテレータを取得する

mearge()
2つのソート済み範囲をマージする

fill()
指定された値で出力の範囲に書き込む。

nth_element()
基準となる要素よりも小さい要素が前に来るよう並べ替える。
この関数は範囲 [first,last) の並び替えを行うが、基準位置 nth のみが正しい要素、つまり仮に範囲 [first,last) 全体を並び替えた際にnthに位置すべき要素となる。前半の範囲 [first,nth) は関数呼び出し後の位置 nth にある要素よりも小さいことは保証されるが、その範囲 [first,nth) 内での要素並び順はなんら保証されない。