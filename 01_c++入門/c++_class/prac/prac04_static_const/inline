/******************/
/*  通常メソッド  */
/******************/
通常関数はコンパイル時でも通常通りincludeファイルが展開され
objファイルが作成されますが、インライン関数の場合
インライン関数を使用している箇所が関数ではなく、
その関数で定義している内容に置き換えられます。
関数呼び出し部分がインライン関数の内容に置換されることを
インライン展開と呼びます。

// インライン無し
コンパイル前：
Test.h
#ifndef TEST_H_
#define TEST_H_

int AddSum(int a, int b)
{
	return (a + b);
}

#endif

Main.cpp
#include "Test.h"

void main(void)
{
	int a = AddSum(1, 3);
}

コンパイル後：
Main.cpp
#ifndef TEST_H_
#define TEST_H_
int AddSum(int a, int b)
{
	return (a + b);
}
#endif

void main(void)
{
	int a = AddSum(1, 3);
}
	
通常のコードではコンパイル後の関数呼び出しに変化はありません。
次はインラインを使ったコードです。

// インライン有り
コンパイル前：
InlineTest.h
#ifndef INLINE_TEST_H_
#define INLINE_TEST_H_

inline int AddSum(int a, int b)
{
	return (a + b);
}

#endif

Main.cpp
#include "InlineTest.h"
			
void main(void)
{
	int a = AddSum(1, 3);
}

コンパイル後：
Main.cpp
#ifndef INLINE_TEST_H_
#define INLINE_TEST_H_

inline int AddSum(int a, int b)
{
	return (a + b);
}

#endif

void main(void)
{
	int a = (a + b);
}

このように関数のインライン展開されると関数呼び出しに
関数の定義内容がそのまま展開されます。



/********************************/
/*  クラス内に定義したメソッド  */
/********************************/
自動的にインライン関数になる。


/********************************/
/*  クラス外に定義したメソッド  */
/********************************/
inline を付けないとinline展開されない


メリット
高速化できる

デメリット
インラインのデメリットは「ファイルサイズの増大」「隠蔽性の低下」
「ビルドファイルの増加

